import os
import json
from google.cloud import storage
from google.oauth2 import service_account
from datetime import datetime, timedelta
import time
import yfinance as yf

def get_credentials():
    """Obtain credentials for Google Cloud services."""
    credentials = service_account.Credentials.from_service_account_file(
  r"C:\Users\Nuwan\Documents\INST767\google api credentials\groovy-marker-420622-e46d87cdec1f.json"
) 
    return credentials

def fetch_stock_data(ticker):
    """ Fetch the current stock price for the given ticker symbol. """
    stock = yf.Ticker(ticker)
    data = stock.history(period="1d", interval="1h")  # Get data at 1-hour intervals
    return {
        'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'price': data['Close'][-1]  # Get the last closing price in the interval
    }

def save_data(data, bucket_name, filename):
    """ Save the fetched data to Google Cloud Storage. """
    client = storage.Client(credentials=get_credentials())
    bucket = client.bucket(bucket_name)
    blob = bucket.blob(filename)

    if blob.exists():
        current_data = json.loads(blob.download_as_text())
        current_data.append(data)
        # Only keep data for the last month
        one_month_ago = datetime.now() - timedelta(days=30)
        current_data = [entry for entry in current_data if datetime.strptime(entry['date'], '%Y-%m-%d %H:%M:%S') > one_month_ago]
    else:
        current_data = [data]

    blob.upload_from_string(json.dumps(current_data, indent=4), content_type='application/json')

def schedule_fetch(ticker, start_date, end_date):
    """ Schedule data fetch from start_date to end_date at hourly intervals. """
    current_time = datetime.now()
    if current_time < start_date:
        time_to_wait = (start_date - current_time).total_seconds()
        time.sleep(time_to_wait)
    
    while current_time <= end_date:
        data = fetch_stock_data(ticker)
        save_data(data, 'yahoo_data_stock', f"{ticker}_data.json")
        print(f"Data fetched for {ticker} at {datetime.now().isoformat()}")
        time.sleep(3600)  # Wait for one hour
        current_time = datetime.now()

if __name__ == "__main__":
    start_date = datetime(2024, 4, 1, 0, 0)
    end_date = datetime(2024, 6, 1, 0, 0)
    schedule_fetch("AAPL", start_date, end_date)